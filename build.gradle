plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

version = '2.1.2'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

application {
    mainClass = 'org.smslib'
}

javafx {
    modules = ['javafx.controls', 'javafx.base']
}

dependencies {
    implementation 'org.openjfx:javafx-base:17.0.2'

    implementation 'commons-net:commons-net:3.11.0'

    // Logging framework
    implementation 'org.apache.logging.log4j:log4j-api:2.25.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.25.1'

    // jSMPP library
    implementation 'org.jsmpp:jsmpp:3.0.1'

    // Test dependencies (JUnit 5 and Hamcrest)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.1'
    testImplementation 'org.hamcrest:hamcrest-core:3.0'

    implementation files('libs/org-netbeans-modules-java-j2seproject-copylibstask.jar')
    implementation files('libs/RXTXcomm.jar')

    // Logging (choose one)
    implementation 'org.slf4j:slf4j-api:2.0.9'

    // Common utilities compatible with Java 21
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17

    options.compilerArgs += [
            '-Xlint:all',           // Enable all warnings
            '-Xlint:-processing',   // Disable annotation processing warnings
            //'-Werror'               // Treat warnings as errors (optional, remove if too strict)
    ]

    // Configure module path and class path separation for JPMS if needed
    // options.compilerArgs += ['--module-path', classpath.asPath]
}

// Configure test execution with Java 21 and ALL JavaFX modules
tasks.withType(Test).configureEach {
    useJUnitPlatform()

    jvmArgs = [

    ]

    // Enable preview features for tests if needed
    jvmArgs += ['--enable-preview']
}

// Custom task to create a fat JAR (equivalent to your Package-For-Store target)
tasks.register('packageForStore', Jar) {
    group = 'build'
    description = 'Packages the application into a single JAR'

    archiveBaseName = 'SMSLib'
    archiveVersion = version
    destinationDirectory = file('store')

    // Include all dependencies including JavaFX
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Include compiled classes
    with jar

    manifest {
        attributes(
                'Main-Class': application.mainClass.get(),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Multi-Release': 'true'
        )
    }

    // Exclude signature files and other problematic files
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/DEPENDENCIES*'
    exclude 'module-info.class'

    // Handle duplicate files (common with JavaFX multi-platform JARs)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Clean store directory first
    doFirst {
        delete fileTree('store')
    }
}

// Make packageForStore depend on build to ensure everything is compiled
packageForStore.dependsOn build

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
        resources {
            srcDirs = ['src/java']
        }
    }
    test {
        java {
            srcDirs = ['test/java']
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}
